/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var VIEW_TYPE_EASY_KEEP = "easy-keep-view";
var DEFAULT_SETTINGS = {
  mySetting: "default",
  notesDB: [],
  themeMode: "system",
  openAsHomepage: false
};
function resolveImageByName(app, imageName) {
  const target = imageName.replace(/\.(jpg|jpeg|png|webp)$/i, "").toLowerCase();
  const candidates = app.vault.getFiles().filter((f) => /\.(jpg|jpeg|png|webp)$/i.test(f.name));
  for (const file of candidates) {
    if (file.basename.toLowerCase() === target) {
      return file;
    }
  }
  return null;
}
function debounce(fn, delay = 300) {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => fn(...args), delay);
  };
}
var EasyKeepView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_EASY_KEEP;
  }
  getDisplayText() {
    return "Easy Keep View";
  }
  // Build the content of the view
  async buildContent() {
    this.mainContainer.empty();
    this.mainContainer.style.overflowY = "auto";
    this.mainContainer.style.height = "100%";
    const cardContainer = this.mainContainer.createDiv("easy-keep-cards-container");
    const newNoteCard = cardContainer.createDiv("easy-keep-card new-note-card");
    newNoteCard.createEl("h3", { text: "+" });
    newNoteCard.createEl("p", { text: "Add New Note" });
    newNoteCard.onclick = () => this.plugin.createNewNote();
    await this.plugin.refreshThumbnails();
    let notes = this.plugin.settings.notesDB.slice().sort((a, b) => b.time - a.time).slice(0, 100);
    if (notes.length) {
      notes.forEach((note) => {
        const card = cardContainer.createDiv("easy-keep-card");
        card.createEl("h3", { text: note.title });
        if (note.imageLink) {
          let file = this.app.metadataCache.getFirstLinkpathDest(note.imageLink, note.path);
          if (!(file instanceof import_obsidian.TFile)) {
            file = resolveImageByName(this.app, note.imageLink);
          }
          if (file instanceof import_obsidian.TFile) {
            const resourcePath = this.app.vault.getResourcePath(file);
            const img = card.createEl("img", { cls: "easy-keep-thumbnail" });
            img.src = resourcePath;
            img.onerror = () => {
              console.warn("[Easy Keep View] Failed to load thumbnail:", resourcePath);
              img.remove();
              if (note.excerpt)
                card.createEl("p", { text: note.excerpt });
            };
            img.onload = () => {
              console.log("[Easy Keep View] Thumbnail loaded:", resourcePath);
            };
          } else if (note.excerpt) {
            card.createEl("p", { text: note.excerpt });
          }
        } else {
          if (note.excerpt) {
            card.createEl("p", { text: note.excerpt });
          }
        }
        card.onclick = () => this.plugin.openNoteInNewTab(note.path);
      });
    } else {
      const noHistory = cardContainer.createDiv("no-history-message");
      noHistory.setText("No notes, create a new one!");
    }
  }
  async refreshContent() {
    await this.buildContent();
  }
  // Initialize view on open
  async onOpen() {
    this.mainContainer = this.containerEl;
    await this.plugin.loadSettings();
    await this.buildContent();
    this.loadCSS();
  }
  // Load custom CSS
  loadCSS() {
    const link = document.createElement("link");
    link.rel = "stylesheet";
    link.href = `${this.plugin.manifest.dir}/assets/styles.css`;
    document.head.appendChild(link);
  }
  async onClose() {
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Easy Keep View Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Theme Mode").setDesc("Select a theme mode for the Easy Keep View").addDropdown((dropdown) => {
      dropdown.addOption("system", "System (adapt)");
      dropdown.addOption("light", "Light");
      dropdown.addOption("dark", "Dark");
      dropdown.setValue(this.plugin.settings.themeMode);
      dropdown.onChange(async (value) => {
        this.plugin.settings.themeMode = value;
        await this.plugin.saveSettings();
        this.plugin.refreshEasyKeepViewIfOpen();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Use Easy Keep View as Home Page").setDesc("Automatically open Easy Keep View when Obsidian starts").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openAsHomepage);
      toggle.onChange(async (value) => {
        this.plugin.settings.openAsHomepage = value;
        await this.plugin.saveSettings();
        new Notice("Restart Obsidian to apply the homepage setting.");
      });
    });
  }
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.app.workspace.onLayoutReady(async () => {
      await this.cleanDatabase();
      this.refreshEasyKeepViewIfOpen();
      if (this.settings.openAsHomepage) {
        await this.activateEasyKeepView();
      }
    });
    this.registerView(VIEW_TYPE_EASY_KEEP, (leaf) => new EasyKeepView(leaf, this));
    const ribbonIconEl = this.addRibbonIcon("dice", "Easy Keep View", () => {
      this.activateEasyKeepView();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.registerEvent(this.app.workspace.on("file-open", async (file) => {
      if (file) {
        await this.addToDatabase(file);
        this.refreshDebounced();
      }
    }));
    this.registerEvent(this.app.vault.on("delete", async (file) => {
      if (file instanceof import_obsidian.TFile) {
        await this.removeFromDatabase(file.path);
        this.refreshDebounced();
      }
    }));
    this.registerEvent(this.app.vault.on("rename", async (file, oldPath) => {
      if (file instanceof import_obsidian.TFile) {
        const entryIndex = this.settings.notesDB.findIndex((e) => e.path === oldPath);
        if (entryIndex !== -1) {
          this.settings.notesDB[entryIndex].path = file.path;
          this.settings.notesDB[entryIndex].title = file.basename;
          await this.saveSettings();
          this.refreshDebounced();
        }
      }
    }));
    this.registerEvent(this.app.vault.on("rename", async (file, oldPath) => {
      if (file instanceof import_obsidian.TFile && /\.(jpg|jpeg|png|webp)$/i.test(file.path)) {
        let updated = false;
        this.settings.notesDB.forEach((entry) => {
          if (entry.imageLink === oldPath) {
            entry.imageLink = file.path;
            updated = true;
          }
        });
        if (updated) {
          await this.saveSettings();
          this.refreshDebounced();
        }
      }
    }));
    this.registerEvent(this.app.vault.on("modify", async (file) => {
      if (file instanceof import_obsidian.TFile) {
        await this.addToDatabase(file);
        this.refreshDebounced();
      }
    }));
    this.refreshDebounced = debounce(() => this.refreshEasyKeepViewIfOpen(), 300);
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_EASY_KEEP);
  }
  // Activate the view
  async activateEasyKeepView() {
    const existingLeaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_EASY_KEEP);
    if (existingLeaves.length > 0) {
      this.app.workspace.revealLeaf(existingLeaves[0]);
      return;
    }
    const leaf = this.app.workspace.getLeaf(true);
    await leaf.setViewState({ type: VIEW_TYPE_EASY_KEEP, active: true });
    this.app.workspace.revealLeaf(leaf);
  }
  // Refresh the view if open
  async refreshEasyKeepViewIfOpen() {
    const existingLeaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_EASY_KEEP);
    if (existingLeaves.length > 0) {
      const view = existingLeaves[0].view;
      await view.refreshContent();
    }
  }
  // Refresh note thumbnails based on content
  // Refresh note thumbnails based on content
  async refreshThumbnails() {
    for (const note of this.settings.notesDB) {
      const file = this.app.vault.getAbstractFileByPath(note.path);
      if (!(file instanceof import_obsidian.TFile))
        continue;
      const content = await this.app.vault.cachedRead(file);
      const lines = content.trim().split("\n").filter((line) => line.trim() !== "");
      const firstLine = lines.find((line) => line.trim() !== "");
      let excerpt = "";
      let imageLink;
      if (firstLine && firstLine.includes("![[") && firstLine.includes("]]")) {
        excerpt = lines.slice(0, 1).join(" ");
      } else {
        if (firstLine) {
          excerpt = firstLine;
          if (lines.length > 1)
            excerpt += " \u2026";
        }
        const match = content.match(/!\[\[([^\]]+)\]\]/);
        if (match) {
          imageLink = match[1].trim();
          if (imageLink && note.imageLink !== imageLink) {
            note.imageLink = imageLink;
          }
        }
      }
      if (imageLink) {
        note.imageLink = imageLink;
      }
      if (excerpt) {
        note.excerpt = excerpt;
      }
    }
    await this.saveSettings();
  }
  // Add note to the database
  async addToDatabase(file) {
    var _a;
    const content = await this.app.vault.cachedRead(file);
    const lines = content.trim().split("\n").filter((line) => line.trim() !== "");
    let excerpt = "";
    let imageLink;
    if (/\.(jpg|jpeg|png|webp)$/i.test(file.path)) {
      imageLink = file.path;
    } else {
      const obsidianEmbedMatch = content.match(/!\[\[([^\]]+)\]\]/);
      const markdownImageMatch = content.match(/!\[.*?\]\((.*?)\)/);
      if (obsidianEmbedMatch || markdownImageMatch) {
        imageLink = (_a = (obsidianEmbedMatch == null ? void 0 : obsidianEmbedMatch[1]) || (markdownImageMatch == null ? void 0 : markdownImageMatch[1])) == null ? void 0 : _a.trim();
      }
    }
    if (!imageLink && lines.length > 0) {
      excerpt = lines.slice(0, 2).join(" ");
      if (lines.length > 2)
        excerpt = excerpt.trim() + " \u2026";
    }
    const titleWithoutExt = file.name.replace(/\.(md|png|jpg|jpeg|webp)$/i, "");
    const newEntry = {
      path: file.path,
      title: titleWithoutExt,
      excerpt,
      time: Date.now(),
      imageLink
    };
    this.settings.notesDB = this.settings.notesDB.filter((entry) => entry.path !== file.path);
    this.settings.notesDB.unshift(newEntry);
    await this.saveSettings();
  }
  // Remove note from the database
  async removeFromDatabase(filePath) {
    const initialLength = this.settings.notesDB.length;
    this.settings.notesDB = this.settings.notesDB.filter((entry) => entry.path !== filePath);
    if (this.settings.notesDB.length !== initialLength) {
      await this.saveSettings();
    }
  }
  // Clean up the database by removing notes that no longer exist
  async cleanDatabase() {
    const files = this.app.vault.getMarkdownFiles();
    const existingPaths = new Set(files.map((file) => file.path));
    this.settings.notesDB = this.settings.notesDB.filter((entry) => existingPaths.has(entry.path));
    await this.saveSettings();
  }
  // Open a note in a new tab
  async openNoteInNewTab(filePath) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (!(file instanceof import_obsidian.TFile))
      return;
    let existingLeaf = null;
    this.app.workspace.iterateAllLeaves((leaf) => {
      var _a;
      if (leaf.view.getViewType() === "markdown" && ((_a = leaf.view.file) == null ? void 0 : _a.path) === filePath) {
        existingLeaf = leaf;
      }
    });
    if (existingLeaf) {
      this.app.workspace.setActiveLeaf(existingLeaf, { focus: true });
    } else {
      const newLeaf = this.app.workspace.getLeaf(true);
      await newLeaf.openFile(file);
      this.app.workspace.setActiveLeaf(newLeaf, { focus: true });
    }
  }
  // Load settings from storage
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  // Save settings to storage
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // Generate a unique name for an untitled note
  generateUniqueUntitledName() {
    const baseName = "Untitled";
    const files = this.app.vault.getMarkdownFiles();
    const existingNames = new Set(files.map((f) => f.basename));
    if (!existingNames.has(baseName)) {
      return baseName;
    }
    let counter = 1;
    while (existingNames.has(`${baseName} ${counter}`)) {
      counter++;
    }
    return `${baseName} ${counter}`;
  }
  // Create a new note
  async createNewNote() {
    const title = this.generateUniqueUntitledName();
    const filePath = `${title}.md`;
    const file = await this.app.vault.create(filePath, "");
    await this.addToDatabase(file);
    this.openNoteInNewTab(filePath);
  }
};
//# sourceMappingURL=data:application/json;base64,
